function [V, Z] = init_SB(P, Tr, RR, c, S_bar, K)
%[V, Z] = init_SB(P, Tr, RR, S_bar, K)

% using c here so not sure if correct but it probably is !!
% just multiplying RR by C !!

[T, J] = size(P);
T = T/2;

V = zeros(3*K, J);
Z = zeros(T, K);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%% changed code  here !! %%%%%%%%%%%%%%%%%%%%%%%%%%%%

%W_tilda = P - RR*S_bar - [Tr(:,1); Tr(:,2)]*ones(1,J);
W_tilda = P - diag([c;c])*RR*S_bar - [Tr(:,1); Tr(:,2)]*ones(1,J);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

for kk=1:K, % iterates over deformations
   V_kk = zeros(T, 3*J);
   for t=1:T,
      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
      %%%%%%%%%%%%%%%%%%%%% changed code  here !! %%%%%%%%%%%%%%%%%%%%%%%%%%%%

      %V_kk_t = pinv(RR([t t+T], :))*W_tilda([t t+T], :);
      V_kk_t = pinv(c(t,1)*RR([t t+T], :))*W_tilda([t t+T], :);

      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

      V_kk(t,:) = V_kk_t(:)';
   end

   [a,b,c_svd] = svd(V_kk, 0);
   sqrtb = sqrt(b(1,1));

   Z(:, kk) = a(:,1) * sqrtb;
   new_V_kk = sqrtb * c_svd(:,1)';

   V((kk-1)*3+1:kk*3, :) = reshape(new_V_kk, 3, J);

   for t = 1:T,

      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
      %%%%%%%%%%%%%%%%%%%%% changed code  here !! %%%%%%%%%%%%%%%%%%%%%%%%%%%%

      %W_tilda([t t+T], :) = W_tilda([t t+T], :) - RR([t t+T], :)*(Z(t,kk)*V((kk-1)*3+1:kk*3, :));
      W_tilda([t t+T], :) = W_tilda([t t+T], :) - c(t,1)*RR([t t+T], :)*(Z(t,kk)*V((kk-1)*3+1:kk*3, :));
      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   end
end
